# ======================================================================
# coderunner-ui — .env.local
# ======================================================================
# This file configures your local coderunner-ui workspace.
# All values are for your machine only (not checked in). Adjust paths
# to match your setup. After changes, restart `npm run dev` (or dev:all).
# ======================================================================


# ======================================================================
# 1) Default model / providers
# ======================================================================

# The model preselected in the UI model picker.
# Here we use LM Studio’s OpenAI-compatible server + a local model.
DEFAULT_SELECTED_MODEL=lmstudio/mistralai/mistral-small-3.2

# Optional: Cloud provider API keys (only needed if you use them).
# You can also paste keys in the UI; keeping them here is convenient.
OPENAI_API_KEY=sk-REPLACE_ME
# ANTHROPIC_API_KEY=
# GOOGLE_GENERATIVE_AI_API_KEY=


# ======================================================================
# 2) LM Studio (OpenAI-compatible local server)
# ======================================================================

# Base URL of your LM Studio server (OpenAI-compatible).
LMS_API_BASE=http://localhost:1234/v1
# Exposed to the browser as well (keep identical).
NEXT_PUBLIC_LMS_API_BASE=http://localhost:1234/v1

# LM Studio accepts arbitrary keys; keep them consistent.
LMS_API_KEY=lmstudio-local
NEXT_PUBLIC_LMS_API_KEY=lmstudio-local


# ======================================================================
# 3) MCP endpoints (HTTP-based servers)
# ======================================================================

# Coderunner MCP endpoint (inside your Apple Container VM).
# Adjust the IP to your container network. 8222 is the default for coderunner MCP.
CODERUNNER_MCP_URL=http://192.168.64.2:8222/mcp
# Optional for client-side code (not required in our current setup):
# NEXT_PUBLIC_CODERUNNER_MCP_URL=http://192.168.64.2:8222/mcp


# ======================================================================
# 4) MCP: Filesystem (host → tools)
# ======================================================================

# Preferred: Go binary (see install.sh). Alternative:
#   npx @modelcontextprotocol/server-filesystem <allowed-path> [...]
MCP_FILESYSTEM_CMD=/Users/jens/go/bin/mcp-filesystem-server

# Primary host directory to expose to the filesystem MCP tool.
# (Additionally, $HOME/.coderunner/assets is exposed by the backend.)
MCP_FS_ASSETS_DIR=/Users/jens/src/coderunner-ui/public/assets


# ======================================================================
# 5) MCP: Shell Exec (host STDIO server → runs commands INSIDE the VM)
# ======================================================================

# STDIO-based MCP server (local Node process the Next.js route starts).
MCP_SHELL_CMD=node
MCP_SHELL_ARGS=mcp/mcp-shell-exec.mjs

# IMPORTANT: Wrapper that executes commands INSIDE the Apple Container VM.
# Use the absolute path to the Apple `container` CLI to avoid ENOENT.
# Commands are passed to:  bash -lc '<your command>'
MCP_SHELL_EXEC_WRAPPER=/usr/local/bin/container exec coderunner bash -lc


# ======================================================================
# 6) MCP: Web Snap (Playwright screenshots/HTML INSIDE the VM)
# ======================================================================

# Another STDIO MCP server (local Node process).
MCP_WEB_SNAP_CMD=node
MCP_WEB_SNAP_ARGS=mcp/mcp-web-snap.mjs
# Uses MCP_SHELL_EXEC_WRAPPER to run Playwright inside the VM.


# ======================================================================
# 7) MCP: Interactive shell sessions (optional, tmux-based)
# ======================================================================

# If you later enable tmux-based, multi-session shell tooling.
MCP_SHELL_SESSION_CMD=node
MCP_SHELL_SESSION_ARGS=mcp/mcp-shell-session.mjs


# ======================================================================
# 8) PTY / Browser Terminal (xterm + WS bridge)
# ======================================================================
# The PTY server gives you a real interactive terminal backed by a host
# pseudo-TTY that talks to `container exec --interactive --tty ...`.

# Where the frontend should connect for the live terminal.
NEXT_PUBLIC_PTY_WS_URL=ws://127.0.0.1:3030/pty

# HTTP endpoint the app (or tools) can POST to in order to mirror text
# into the currently open terminal (useful to “tee” LLM outputs).
PTY_FEED_URL=http://127.0.0.1:3030/write
PTY_INPUT_URL=http://localhost:3030/input 

# Bind address / port for the local PTY server (`node mcp/pty-server.mjs`).
PTY_HOST=127.0.0.1
PTY_PORT=3030

# Absolute path to Apple’s container CLI (avoid relying on PATH).
CONTAINER_BIN=/usr/local/bin/container

# Exact args for an interactive login shell in the VM.
# Do NOT include --stdin (Apple `container` does not support it).
PTY_CONTAINER_ARGS=exec --interactive --tty coderunner bash -l

# Optional: A fallback command if you ever want one (currently unused by the server).
# PTY_CONTAINER_ARGS_FALLBACK=exec --tty coderunner bash -l


# ======================================================================
# 9) Notes / tips
# ======================================================================
# - If you move LM Studio to another port, update LMS_API_BASE (+ NEXT_PUBLIC_…).
# - If your coderunner MCP uses a different IP/port, update CODERUNNER_MCP_URL.
# - If the PTY window shows “disconnected (shell-exit)”, check:
#     * CONTAINER_BIN is correct (absolute path)
#     * PTY_CONTAINER_ARGS uses `--interactive --tty` and a valid container name
#     * The VM is running and the `coderunner` container exists
# - After editing this file, restart the dev server so Next.js picks up changes.
